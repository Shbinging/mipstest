#include <asm.h>
#include <regdef.h>
#include <inst_test.h>

LEAF(n100_msub_test)
    .set noreorder
    addiu s0, s0 ,1
    li  s2, 0x0
###test inst
    TEST_MSUB(0x7c85bcc6, 0x19f7e5ff, 0x78865b5f, 0x599f4abd, 0xe3e9d1a3, 0xefc63198)
    TEST_MSUB(0x4d923ad9, 0x683cff69, 0x0951d141, 0x01a35299, 0x09425900, 0x682dbb7e)
    TEST_MSUB(0x3b647945, 0x6847824b, 0x3d7013de, 0x4d93f3e4, 0xf23d0d8d, 0x55a94a6d)
    TEST_MSUB(0x7b12f87a, 0x29806ea5, 0x69006754, 0x0c49a091, 0x5a4ff1e6, 0x247636d4)
    TEST_MSUB(0x37ec76ea, 0x0e043668, 0x559ca251, 0x6fbcdb0b, 0x38da326f, 0xe8a623bf)
    TEST_MSUB(0x11c775c0, 0x458d5fa6, 0x69d32b3f, 0x1f3849d1, 0x5e443051, 0x38a588b4)
    TEST_MSUB(0x612f23a1, 0x57f24d0a, 0x247c0390, 0x12de921a, 0xbbaea701, 0x5541dc6c)
    TEST_MSUB(0x49f30e58, 0x6cb87b7b, 0x3dd17708, 0x4678cb1e, 0xf643c368, 0x5bb409b2)
    TEST_MSUB(0x06b0617b, 0x3657d268, 0x201815dc, 0x54429c54, 0xfebf254b, 0x2bc7916c)
    TEST_MSUB(0x1e94d1d1, 0x2969e71d, 0x55e5eeee, 0x59f94b16, 0x3c548f5d, 0x0b395135)
    TEST_MSUB(0x11b16968, 0x135602cc, 0x278d3efa, 0x0cc461e2, 0xb2bb16b4, 0x115d0c94)
    TEST_MSUB(0x3cd67171, 0x108da64e, 0x190e0273, 0x74c2e85b, 0xab7d5a90, 0x052039d6)
    TEST_MSUB(0x1e91dcb6, 0x6eaaa4c4, 0x647fc366, 0x30595276, 0xd0a11fb2, 0x5baf9f56)
    TEST_MSUB(0x3438046a, 0x4e52eea6, 0x4f919c47, 0x1567280c, 0x05689916, 0x47abeccc)
    TEST_MSUB(0x26453bb0, 0x740d9fd7, 0x2845ba26, 0x70384a08, 0x63f86e80, 0x62664380)
    TEST_MSUB(0x60c61b53, 0x6617312e, 0x36b11527, 0x67767cce, 0x270e31f1, 0x4ffca162)
    TEST_MSUB(0x1c6f0396, 0x56c92b03, 0x3bb91922, 0x3b03d567, 0xf1a69ce8, 0x49049d43)
    TEST_MSUB(0x00331220, 0x119f0810, 0x14fd207d, 0x11e47b88, 0xfec9c0b8, 0x10277d55)
    TEST_MSUB(0x24f50adc, 0x3c8a5f77, 0x1ea8dd6a, 0x61cb7c4d, 0x63dd19fa, 0x30d404c7)
    TEST_MSUB(0x4d1805c5, 0x37b6dfdd, 0x568e64a8, 0x6ba9e27b, 0x56e9590d, 0x134feb37)
    TEST_MSUB(0x266184a1, 0x3b0e280f, 0x1c0334f1, 0x5a99890b, 0xdce04546, 0x31243a88)
    TEST_MSUB(0x096116b5, 0x6b94d138, 0x7000b117, 0x2fa65265, 0x9277daa2, 0x56bbec35)
    TEST_MSUB(0x5fa27110, 0x18466b3d, 0x1fde9c6d, 0x40688c63, 0x82b856e9, 0x1041c038)
    TEST_MSUB(0x7e5d9c6c, 0x568fb194, 0x27df0931, 0x1acca002, 0x7bd4ea0a, 0x52632bfe)
    TEST_MSUB(0x2d58dc97, 0x63982253, 0x55d0756a, 0x2d8beeb7, 0xa59e61d1, 0x5453957a)
    TEST_MSUB(0x75372a64, 0x6acd95e7, 0x3f706a3f, 0x1a2c3540, 0xaa498fa4, 0x64513698)
    TEST_MSUB(0x2757f55f, 0x5e1947a9, 0x7bf7b18e, 0x746ffb24, 0x88dac367, 0x25b6d131)
    TEST_MSUB(0x15d02786, 0x52861636, 0x6019dda0, 0x3c31ac27, 0x2557e426, 0x3bed60b1)
    TEST_MSUB(0x0d943e45, 0x7c1d1291, 0x16cb3533, 0x16f554fa, 0xd1de8e77, 0x7a11c3f3)
    TEST_MSUB(0x67b1e3ca, 0x06cbe64a, 0x469ba75f, 0x475454da, 0xf00e30e4, 0xf31f7864)
    TEST_MSUB(0x1f125188, 0x667a43cd, 0x07bce13d, 0x1d6fedf4, 0x50132a64, 0x65967c32)
    TEST_MSUB(0x3d09f561, 0x2f9bea6e, 0x383c8df6, 0x6a62d1f9, 0xe6120b1b, 0x183d2257)
    TEST_MSUB(0x13340cc1, 0x0e0d0360, 0x17eec0b0, 0x086b3725, 0x48bc6351, 0x0d438768)
    TEST_MSUB(0x78da9948, 0x575f2af0, 0x22976c66, 0x20328ea7, 0xfe064ebe, 0x53056889)
    TEST_MSUB(0x35787299, 0x1e8f1df4, 0x14a289cb, 0x4b489a20, 0xa02b1b39, 0x187da572)
    TEST_MSUB(0x7115342a, 0x74bc676b, 0x077a4647, 0x7ea97270, 0x616bd71a, 0x710945c4)
    TEST_MSUB(0x70d979fd, 0x1e457b7a, 0x159ec76a, 0x588b5dc7, 0x3d6cf497, 0x16cb21cc)
    TEST_MSUB(0x251161c5, 0x5c3a6eca, 0x1fdfb2a1, 0x4423b34d, 0xf4df1458, 0x53be916e)
    TEST_MSUB(0x42b4b297, 0x279c93de, 0x6193a141, 0x7fbea7f8, 0x8041149f, 0xf6ebab47)
    TEST_MSUB(0x57387e4c, 0x19d02f37, 0x6a2179f1, 0x6a6c8b0d, 0x8aa3720f, 0xedb152f4)
    TEST_MSUB(0x27dd3298, 0x02103aa2, 0x72d7c233, 0x20b7cbe0, 0x619fd4f8, 0xf362ceaa)
    TEST_MSUB(0x596f6592, 0x156f2e99, 0x40ea5a87, 0x0ee7d82b, 0xa3df48e5, 0x11a7935d)
    TEST_MSUB(0x33fe4c8d, 0x558ce452, 0x5a30724b, 0x251380b7, 0x2fa618f0, 0x487d04dc)
    TEST_MSUB(0x4a494bbe, 0x61aab893, 0x23bcf327, 0x3b22c5bb, 0x7ff8ab41, 0x596951d6)
    TEST_MSUB(0x7ff0340d, 0x395bba92, 0x13ae2382, 0x250195d2, 0x12ea6969, 0x3683703e)
    TEST_MSUB(0x1596295c, 0x338dd623, 0x6925491f, 0x584adbf3, 0x96ae3bef, 0x0f4a45e2)
    TEST_MSUB(0x5b2a6a01, 0x4ab8ea60, 0x580983eb, 0x3262e84d, 0xdacac452, 0x39650b14)
    TEST_MSUB(0x64891998, 0x422afddd, 0x1ccf735a, 0x0c664c30, 0x3988c0b8, 0x40c5c13a)
    TEST_MSUB(0x443b387f, 0x0fa7358d, 0x2d1e1810, 0x1daa9e11, 0xe7c1bf6f, 0x0a6cbafb)
    TEST_MSUB(0x25166426, 0x6e087297, 0x2c92763c, 0x5914b0b3, 0x30b47832, 0x5e85ed47)
    TEST_MSUB(0x439556e9, 0x06c2e888, 0x7e28316b, 0x0ddea2a7, 0x3e4d641c, 0xffed2703)
    TEST_MSUB(0x686da11b, 0x21e52492, 0x49016862, 0x685dd528, 0x18c1c7cb, 0x0421cfde)
    TEST_MSUB(0x5b40df24, 0x5caf8be4, 0x0d5f6afb, 0x70d70880, 0x076689a4, 0x56ca9182)
    TEST_MSUB(0x103d6207, 0x7684b41a, 0x4921e473, 0x6b67cc08, 0xc9dd9a6f, 0x57d5e2b1)
    TEST_MSUB(0x413d9e7b, 0x212b685f, 0x1dcab455, 0x25c6b813, 0x96d7242c, 0x1cc5fc1b)
    TEST_MSUB(0x6356663c, 0x3a9a27b0, 0x322d0443, 0x27919ebb, 0x54dfef4b, 0x32d8c16e)
    TEST_MSUB(0x4a415d3d, 0x5f4b1c53, 0x453c3ccc, 0x6f57c164, 0xb78fd18d, 0x412e4230)
    TEST_MSUB(0x4d538eea, 0x71ceb308, 0x486c7217, 0x10e8e5d3, 0xc50af2f5, 0x6d06089a)
    TEST_MSUB(0x78919b90, 0x4694a382, 0x1ec7887b, 0x60ff3cab, 0x12c79d67, 0x3aeb2048)
    TEST_MSUB(0x6879c815, 0x67c8f0dd, 0x495d11d4, 0x43baa739, 0xec1783e1, 0x546017a7)
    TEST_MSUB(0x44787cc2, 0x56bc7ccf, 0x3491afba, 0x54b5dec9, 0x613037b8, 0x45575665)
    TEST_MSUB(0x4d4130e9, 0x7db3942d, 0x401daad2, 0x0e7ecf64, 0xb52ea8e1, 0x7a12324a)
    TEST_MSUB(0x1edefc8c, 0x5de85f27, 0x34458777, 0x023562c8, 0xb10e9994, 0x5d74ed87)
    TEST_MSUB(0x188286d7, 0x66728bba, 0x29c70183, 0x62c3e415, 0x210dbb18, 0x56546557)
    TEST_MSUB(0x45bda80d, 0x6f033e4f, 0x521ba579, 0x131136f7, 0x40207a4e, 0x68e5ab90)
    TEST_MSUB(0x60d1f158, 0x1a881790, 0x23fa1ccb, 0x59638ce8, 0x48e7d560, 0x0df82607)
    TEST_MSUB(0x611cbb13, 0x42c1a546, 0x3a62c994, 0x49968328, 0x63ce7ff3, 0x31f925ff)
    TEST_MSUB(0x2a8a9623, 0x03bfdb68, 0x0d512a61, 0x6f0312e5, 0xfdd1db5e, 0xfdf98118)
    TEST_MSUB(0x5a7c5837, 0x41e2da1b, 0x43b8f1af, 0x27bd8920, 0xd2d47b57, 0x375f8978)
    TEST_MSUB(0x3f966e49, 0x03d69c81, 0x363c5885, 0x5e756ad5, 0xd7f0b5a0, 0xefd393c9)
    TEST_MSUB(0x61befba8, 0x6a81dffc, 0x60aacd9e, 0x7a418280, 0xcecff0a8, 0x3c57bd59)
    TEST_MSUB(0x50f46bb7, 0x0a71cf21, 0x5d056695, 0x16b213c4, 0x909ad2a3, 0x0232a360)
    TEST_MSUB(0x79750d71, 0x2f210c0e, 0x29c34abc, 0x5a46fec9, 0x6390d7d5, 0x2066ced1)
    TEST_MSUB(0x49a9239e, 0x4dbd6787, 0x33aa8bb1, 0x2ac5deb1, 0x2266103d, 0x451b7d6d)
    TEST_MSUB(0x107f0ccd, 0x6e0d5545, 0x745c61d9, 0x3b09a2f0, 0x1056ff5d, 0x5337a969)
    TEST_MSUB(0x71cd30ad, 0x01ad8c3b, 0x2a0cb5d6, 0x4c4988e4, 0xdbdb8e15, 0xf525b223)
    TEST_MSUB(0x43906656, 0x6dc5a785, 0x74071205, 0x0326d49f, 0x9c82113b, 0x6c57f8e4)
    TEST_MSUB(0x719c4406, 0x2a436a8a, 0x619c3f75, 0x535b3fae, 0x28345780, 0x0a7af725)
    TEST_MSUB(0x14c54a86, 0x42470d13, 0x4d9cc22e, 0x65b9b63d, 0xab205190, 0x236fe6ee)
    TEST_MSUB(0x4cb8dc34, 0x2aa228c3, 0x7c6bca02, 0x462de9a5, 0xf209d6ea, 0x08865f05)
    TEST_MSUB(0x59c334d1, 0x262f14be, 0x2074e86e, 0x236c5870, 0xde4fb4b1, 0x21b15c6e)
    TEST_MSUB(0x73ec7c45, 0x541f7420, 0x4e323721, 0x046b8912, 0x8618f2f3, 0x52c5d268)
    TEST_MSUB(0x422cc965, 0x428e98fb, 0x3f752c02, 0x33f9fa13, 0xeb8e913f, 0x35ac4a41)
    TEST_MSUB(0x443c2536, 0x6981e1d8, 0x004382f7, 0x07cc8b8c, 0x59606922, 0x697fd352)
    TEST_MSUB(0x5747895d, 0x744a94fc, 0x0af3602c, 0x48e3cd63, 0x90221c59, 0x712c6358)
    TEST_MSUB(0x1e8dff86, 0x6c8f9fa1, 0x1c3f0d12, 0x33534a0d, 0xa2bd219c, 0x66e5df69)
    TEST_MSUB(0x2ed6acb4, 0x69dbcf40, 0x190d004a, 0x7b8f88e8, 0xdb9119a4, 0x5dc48473)
    TEST_MSUB(0x147df804, 0x1578ca4c, 0x41bd728e, 0x6e412cd5, 0xb81f3fde, 0xf928a675)
    TEST_MSUB(0x3ba7df0a, 0x62325afc, 0x11ad8545, 0x2f945b4f, 0x61d837bf, 0x5ee940e5)
    TEST_MSUB(0x3651cf1c, 0x5fdfbc67, 0x33ffe461, 0x787e9882, 0xff083dda, 0x4766126c)
    TEST_MSUB(0x226e5562, 0x73751064, 0x2c789295, 0x66aa7a98, 0x900a4aea, 0x619f689f)
    TEST_MSUB(0x5cf6f23c, 0x2cbc158c, 0x6e770624, 0x343e7b9a, 0xecb1f494, 0x1630f223)
    TEST_MSUB(0x2106aa89, 0x796a6650, 0x7d2248fd, 0x3f94aa0f, 0x924861b6, 0x5a564b67)
    TEST_MSUB(0x65fa05f1, 0x1961560f, 0x72e7f41c, 0x14d0b2a5, 0x87fe37e5, 0x10098a57)
    TEST_MSUB(0x033d2550, 0x0bf4f467, 0x10603b8e, 0x17bb1d54, 0x7a3084b8, 0x0a7056e1)
    TEST_MSUB(0x216dbeb3, 0x521dae1c, 0x05fc4a29, 0x5d159dbe, 0xfc568f45, 0x4ff085c8)
    TEST_MSUB(0x34500918, 0x17a9cf6f, 0x0ca9f90d, 0x6aa1d835, 0x27cf8167, 0x12636cb8)
    TEST_MSUB(0x77898bd6, 0x40a9dd6f, 0x632070b7, 0x19f7e138, 0xa5cf0cce, 0x369bb6eb)
    TEST_MSUB(0x341eedd3, 0x0f99034c, 0x00a25bd0, 0x1115e00f, 0xc2358ca3, 0x0f8e2d53)
    TEST_MSUB(0x3c5518d8, 0x6f1961f4, 0x45545ba9, 0x5d5bc361, 0xbb79a2cf, 0x55d0e2c1)
###detect exception
    bne s2, zero, inst_error
    nop
###score ++
    addiu s3, s3, 1
### return
    jr ra
    nop
END(n100_msub_test)
