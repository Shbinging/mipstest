#include <asm.h>
#include <regdef.h>
#include <inst_test.h>

LEAF(n3_madd_test)
    .set noreorder
    addiu s0, s0 ,1
    li  s2, 0x0
###test inst
    TEST_MADD(0x0a7d6700, 0x2668999b, 0x397b048a, 0x54a890ae, 0x91381ccc, 0x396ad04f)
    TEST_MADD(0x2c4ab983, 0x40b6172c, 0x18948ec7, 0x309bef68, 0x9c6d835b, 0x4560eae0)
    TEST_MADD(0x73a03616, 0x48366d2a, 0x37171000, 0x72087790, 0xa9093616, 0x60c084bd)
    TEST_MADD(0x3c346552, 0x343e506b, 0x3b27039d, 0x1d702944, 0x8fd58006, 0x3b0ba66e)
    TEST_MADD(0x2a1d5195, 0x4001710d, 0x587207ed, 0x15cff245, 0xa5fa7e76, 0x478aa39b)
    TEST_MADD(0x3ee63c79, 0x75a97460, 0x6009cc79, 0x0792849b, 0x5e456dbc, 0x7880b04d)
    TEST_MADD(0x0db7cd22, 0x3562eba3, 0x4d95e8cb, 0x2244946b, 0xf1e175fb, 0x3fc59d5a)
    TEST_MADD(0x6bb2429d, 0x522494df, 0x32ca89cd, 0x762fa99e, 0x444ea423, 0x6997653a)
    TEST_MADD(0x788d2e7a, 0x6c458e57, 0x4ad83a4c, 0x24d7e7fe, 0x7d8599e2, 0x770b15f6)
    TEST_MADD(0x2cfba583, 0x636cc913, 0x5573d766, 0x209bdb99, 0x833da379, 0x6e4f4a70)
    TEST_MADD(0x2ba3363d, 0x0c8ae766, 0x12a4532a, 0x67d79b8f, 0xd20e18b3, 0x141ab831)
    TEST_MADD(0x40c937d1, 0x4dcb56c7, 0x0547c4d4, 0x6ae68967, 0x6776dd1d, 0x4fffcf97)
    TEST_MADD(0x0dccc7d4, 0x5db9ccc1, 0x00b67bac, 0x4cb3044e, 0xa899263c, 0x5df07913)
    TEST_MADD(0x53634121, 0x60c04826, 0x544588e9, 0x611b0e43, 0xe8a5d41c, 0x80b7890d)
    TEST_MADD(0x162333c9, 0x21db71b4, 0x035fa2af, 0x01d57666, 0x8dd5af83, 0x21e1a178)
    TEST_MADD(0x74000694, 0x362a2c7c, 0x78052004, 0x6c8d350e, 0x661c9acc, 0x690e89b0)
    TEST_MADD(0x226fbad3, 0x42dd5a50, 0x11651d0c, 0x4f6b6056, 0xbd4ffcdb, 0x4842da15)
    TEST_MADD(0x264a2363, 0x66d8f472, 0x70073bf0, 0x51ed59a1, 0x8bdd4553, 0x8ab31c54)
    TEST_MADD(0x7363dbd8, 0x02ab8f1a, 0x39c4f530, 0x342d13aa, 0x47d13db8, 0x0e71bcf7)
    TEST_MADD(0x5076e5e1, 0x3f0cba04, 0x1f139d11, 0x5e43adb5, 0xe3ec6fe6, 0x4a7e24e8)
    TEST_MADD(0x1cc686c5, 0x1fca18bd, 0x2af6b203, 0x7029c7e7, 0x783c7c7a, 0x329d09ad)
    TEST_MADD(0x008a60e3, 0x7f3c3aec, 0x5144d62a, 0x16ad94ac, 0xbcfc8d1b, 0x866f400a)
    TEST_MADD(0x2117aca1, 0x54a478d9, 0x18830b13, 0x1517b335, 0x62ac4090, 0x56a97db0)
    TEST_MADD(0x0acea555, 0x10882b17, 0x01a4e843, 0x2d3e6028, 0x2ae60fcd, 0x10d28e79)
    TEST_MADD(0x53658568, 0x130a0550, 0x7ca9c07f, 0x79afa8cb, 0x3225821d, 0x4e4bcb89)
    TEST_MADD(0x79e2f9c2, 0x6cb0fc6f, 0x4b9d026c, 0x6d46d59b, 0x8a7f4d26, 0x8cf7c27d)
    TEST_MADD(0x6f5c8b89, 0x0561f79d, 0x2173e945, 0x3fd3716a, 0xb231971b, 0x0db91f60)
    TEST_MADD(0x446eb1a1, 0x40878656, 0x1e171f1f, 0x61353867, 0x9ef5ff1a, 0x4bf48a8b)
    TEST_MADD(0x60519f13, 0x490dd123, 0x515f004e, 0x60dbfff7, 0x07029c55, 0x67d75ee2)
    TEST_MADD(0x484a0c0f, 0x22a3d678, 0x778994a3, 0x6961b8b0, 0x8678641f, 0x53d8e5cd)
    TEST_MADD(0x77484f52, 0x100c9fb6, 0x7e796be5, 0x0216f4a7, 0xc301f5b5, 0x1114e9db)
    TEST_MADD(0x2094cace, 0x001e5429, 0x2f5554d0, 0x73fa5036, 0x0a35aeae, 0x158ff16c)
    TEST_MADD(0x13285979, 0x2bff154f, 0x6da9f901, 0x0d0b533b, 0x351b0fb4, 0x319590e9)
    TEST_MADD(0x18b011be, 0x3946fb6e, 0x7a5228d6, 0x080c9d47, 0x028ca318, 0x3d1f93b5)
    TEST_MADD(0x3ea8f30b, 0x1bc6121b, 0x47e00eb1, 0x0317a4ac, 0x778335f7, 0x1ca455a4)
    TEST_MADD(0x5c4d9871, 0x65f72dd0, 0x644cdd13, 0x3c9f3785, 0xbe888850, 0x7db7931e)
    TEST_MADD(0x2f04fef3, 0x35abdd61, 0x1d7b377c, 0x774f0b03, 0x961cf967, 0x43693e76)
    TEST_MADD(0x584fb3da, 0x1504cc1f, 0x60b0c3b3, 0x4f98032c, 0x78446f9e, 0x3314c2aa)
    TEST_MADD(0x25116bd6, 0x5f2a2f99, 0x51aef7d3, 0x45a636a4, 0xf340b102, 0x75636148)
    TEST_MADD(0x5f4883c2, 0x01044ca3, 0x39a086da, 0x7270dd3b, 0x4f11ca00, 0x1ac730b8)
    TEST_MADD(0x2d0361f2, 0x274a7fdb, 0x7f7c3076, 0x45b373b0, 0x4cabb512, 0x4a00565d)
    TEST_MADD(0x60917b49, 0x79ce594d, 0x4dc010f7, 0x1f3a6e54, 0x2bd72e55, 0x834a5a61)
    TEST_MADD(0x15946b68, 0x15a01fa8, 0x22521301, 0x71e203da, 0x7d939d42, 0x24e4a704)
    TEST_MADD(0x7b974d79, 0x069ef014, 0x2e813b5f, 0x2a9c4c6c, 0x3ba08d8d, 0x0e5c8874)
    TEST_MADD(0x3c4acd76, 0x4bfc72db, 0x21eb576f, 0x149a8150, 0xb1ab0f26, 0x4eb74e64)
    TEST_MADD(0x61013efa, 0x029c1b23, 0x6432847c, 0x0612aad0, 0x8ebf3bba, 0x04fc98a6)
    TEST_MADD(0x61c64abc, 0x35e17c4f, 0x4bb8e174, 0x410ece7e, 0x348899d4, 0x491fcebe)
    TEST_MADD(0x36e5c8f3, 0x0559684e, 0x337fabb9, 0x63e92ae5, 0x10a7bf70, 0x1972af8b)
    TEST_MADD(0x2ca3e82a, 0x32fbdc2f, 0x299c9e96, 0x0d356373, 0xe261278c, 0x35217dd3)
    TEST_MADD(0x2cca357c, 0x775caf8d, 0x2c6fd1c8, 0x425ea0e5, 0x675ddd64, 0x82e1f09f)
    TEST_MADD(0x0cfccf36, 0x4ec1e4c9, 0x3440a4bf, 0x08941caf, 0x0d9e51c7, 0x50822529)
    TEST_MADD(0x5560d4dd, 0x62c1e01e, 0x3330691b, 0x11aba253, 0x909efe9e, 0x664a68e4)
    TEST_MADD(0x2ebe52f9, 0x551bc08b, 0x264623a3, 0x0fbf91f3, 0x611e79b2, 0x577680c8)
    TEST_MADD(0x57b7dbae, 0x0a78a81f, 0x15d23cc4, 0x397e266a, 0x22421cd6, 0x0f5f3867)
    TEST_MADD(0x405a246f, 0x618b1e38, 0x7a8cf4e8, 0x773fed62, 0xc622ad3f, 0x9aa13e63)
    TEST_MADD(0x66e48687, 0x2e0ca0a1, 0x5b291847, 0x13886eb1, 0x4174d19e, 0x350142ae)
    TEST_MADD(0x61087cd0, 0x04c5b6dd, 0x20bdd224, 0x0dd2b24d, 0x6bc5b9a4, 0x068a4d0d)
    TEST_MADD(0x7c22666b, 0x4d2da3ec, 0x50315332, 0x091f35a1, 0xf66f12dd, 0x5009269e)
    TEST_MADD(0x1bef88b5, 0x0471f7f1, 0x11b35250, 0x71505d93, 0x73cedca5, 0x0c47adc8)
    TEST_MADD(0x6733d80f, 0x44e3bb6b, 0x02fbffe6, 0x15f22b08, 0x987b793f, 0x45253a21)
    TEST_MADD(0x19ff7bf6, 0x2942238a, 0x25b1bcfb, 0x71b757a4, 0x8982d9c2, 0x3a0096ea)
    TEST_MADD(0x33bacba9, 0x3b83f9bf, 0x2b357e0e, 0x7414f018, 0x9803bcf9, 0x4f1bbf91)
    TEST_MADD(0x1d0f17f8, 0x25c272f6, 0x6b54dd7a, 0x03f39e7f, 0x65a8437e, 0x276a9590)
    TEST_MADD(0x53cf1397, 0x467df5c2, 0x177c0d30, 0x34d79068, 0x78ef6f17, 0x4b56eede)
    TEST_MADD(0x4b43ac9f, 0x3839df54, 0x42aa42b5, 0x4766130a, 0x4ffbb6b1, 0x4ad1aca0)
    TEST_MADD(0x05678341, 0x12db95e7, 0x508548ab, 0x21570bf6, 0xdcb7b093, 0x1d582553)
    TEST_MADD(0x174d8dd8, 0x62389afb, 0x12a76989, 0x7e8165e7, 0x9509d577, 0x6b706eb5)
    TEST_MADD(0x271c5667, 0x15a36970, 0x147390ef, 0x411bd25d, 0x5a310b3a, 0x1ad6fa3b)
    TEST_MADD(0x3ee58cfa, 0x3a254dea, 0x32d32a02, 0x72a058a3, 0x5709fc40, 0x50e72c32)
    TEST_MADD(0x75a947aa, 0x5e08a810, 0x66b548bc, 0x12b85fa2, 0x397f12a2, 0x658b5fd8)
    TEST_MADD(0x03cb1b07, 0x520a2636, 0x16abfe21, 0x579a2e9e, 0x0075e165, 0x59cc412b)
    TEST_MADD(0x18881bf8, 0x2e280b51, 0x0c71bf06, 0x63cbc898, 0x25103788, 0x3301f023)
    TEST_MADD(0x6661eaa5, 0x4f1c01bb, 0x2b31dba2, 0x6bc96de6, 0x97e33831, 0x614bd538)
    TEST_MADD(0x61f797a2, 0x7bb7244e, 0x0d2079dd, 0x7945257a, 0xa29f9bf4, 0x81ef0994)
    TEST_MADD(0x5defbf49, 0x1fc7e366, 0x77c68b61, 0x050c15b0, 0x6d6a86f9, 0x22246b93)
    TEST_MADD(0x356b4cd6, 0x0c3a1c50, 0x4627e80e, 0x7450d9d0, 0xe5ebb636, 0x2c1a599f)
    TEST_MADD(0x465f6a3b, 0x78fb1210, 0x66f13274, 0x3c08b1e5, 0xe3a3bfff, 0x911f18f5)
    TEST_MADD(0x5703ba20, 0x4da67b30, 0x4ec11187, 0x5aced527, 0x8aa4b8b1, 0x6995fc48)
    TEST_MADD(0x1fb0a166, 0x656d0fa8, 0x326903c6, 0x3838bd5f, 0x7fc235e0, 0x707f34be)
    TEST_MADD(0x13951af9, 0x3edac2cc, 0x1c0485f7, 0x79f7059e, 0x754e9c6b, 0x4c33ef18)
    TEST_MADD(0x0df6c488, 0x47366199, 0x65c07385, 0x6fee5c2a, 0xf9b3845a, 0x73b3913c)
    TEST_MADD(0x42ed85e7, 0x72e0ed62, 0x693381a5, 0x20dd4531, 0xd32bcf7c, 0x80624b7c)
    TEST_MADD(0x12a8d0c8, 0x60fa0d06, 0x25e95ae1, 0x48141d9f, 0x6f77bf87, 0x6ba6a933)
    TEST_MADD(0x6d342957, 0x6c1142ef, 0x3c64f76f, 0x33939392, 0x0a9b03a5, 0x783c3105)
    TEST_MADD(0x650c54ff, 0x235629e3, 0x6f9c4577, 0x3c100f20, 0xbc16fcdf, 0x3d85ca87)
    TEST_MADD(0x70fca513, 0x3e5d56fe, 0x16dee447, 0x10ad467a, 0xfd9bd8e9, 0x3fdac02e)
    TEST_MADD(0x23ca66a6, 0x4947e80d, 0x48e603d9, 0x375f819f, 0x5f1e236d, 0x590c8525)
    TEST_MADD(0x0822aada, 0x64ea89d0, 0x3156873d, 0x16196f62, 0xe2dae334, 0x692ce059)
    TEST_MADD(0x2c20eb69, 0x1716fac2, 0x0607cb8c, 0x6f0e7151, 0x5b191eb5, 0x19b4b31c)
    TEST_MADD(0x09f7e824, 0x6f3b4d31, 0x0febb682, 0x1ca0b8ed, 0x7b9d4e7e, 0x710313f9)
    TEST_MADD(0x50355a38, 0x35d51163, 0x64b4d68c, 0x3d69838f, 0x766ed66c, 0x4dfdaa6f)
    TEST_MADD(0x21e65453, 0x2119cdfb, 0x70fd1721, 0x06f2a952, 0x0a6e85e5, 0x242ad681)
    TEST_MADD(0x446ff7df, 0x60995c98, 0x4302b872, 0x356c9cf2, 0xaf7fcba3, 0x6e955b02)
    TEST_MADD(0x1ef6b396, 0x59e19cba, 0x4619e36c, 0x42c11a3c, 0x7a8cf8e6, 0x6c292a0f)
    TEST_MADD(0x232984c7, 0x0effe745, 0x7a209bdb, 0x2b4c2fa1, 0xfc4cbe82, 0x23a7b9d9)
    TEST_MADD(0x73ea7115, 0x2b772318, 0x41659f03, 0x200b5c7f, 0x9f9a6792, 0x33a6bdf7)
    TEST_MADD(0x428e1ddb, 0x476d6a90, 0x0f19cdd0, 0x4c8605ff, 0x4927300b, 0x4bf0fb86)
    TEST_MADD(0x36a8b7c1, 0x1f058452, 0x6926beec, 0x06de11f9, 0x28ae174d, 0x21d7a3c7)
    TEST_MADD(0x54da95b5, 0x4ddb9578, 0x44479588, 0x76c0ea08, 0xbbc591f5, 0x6d880880)
    TEST_MADD(0x6ef56374, 0x3544aca9, 0x7db3935b, 0x33655b53, 0x497682f5, 0x4e8137b5)
###detect exception
    bne s2, zero, inst_error
    nop
###score ++
    addiu s3, s3, 1
### return
    jr ra
    nop
END(n3_madd_test)
